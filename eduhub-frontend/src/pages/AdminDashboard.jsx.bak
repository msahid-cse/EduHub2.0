import React, { useState, useEffect, useRef } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import axios from 'axios';
import {
  Users,
  BookOpen,
  Briefcase,
  FileText,
  Bell,
  Settings,
  PlusCircle,
  List,
  Edit,
  Trash2,
  MessageSquare,
  Mail,
  CheckCircle,
  RefreshCw,
  XCircle,
  AlertCircle,
  Globe,
  MessageCircle,
  Heart,
  Send,
  Image as ImageIcon,
  File,
  X,
  Paperclip as PaperclipIcon,
  Download,
  Upload,
  GraduationCap,
  Calendar
} from 'lucide-react';
import { apiClient, communityAPI, instructorService } from '../api/apiClient';

// CSS styles for animations and gradients
const styles = {
  fadeIn: {
    animation: 'fadeIn 0.3s ease-out',
  },
  gradientRadial: {
    background: 'radial-gradient(circle, rgba(6, 182, 212, 0.1) 0%, rgba(0, 0, 0, 0) 70%)',
  }
};

// Animation keyframes
const keyframes = `
  @keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
  }
`;

const AdminDashboard = () => {
  const navigate = useNavigate();
  const [stats, setStats] = useState({
    users: 0,
    courses: 0,
    jobs: 0,
    notices: 0,
    feedback: 0,
    globalPosts: 0,
    instructors: 0,
    events: 0
  });
  const [isLoading, setIsLoading] = useState(true);
  const [recentJobs, setRecentJobs] = useState([]);
  const [recentNotices, setRecentNotices] = useState([]);
  const [recentCourses, setRecentCourses] = useState([]);
  const [recentInstructors, setRecentInstructors] = useState([]);
  
  // Feedback management state
  const [feedbackList, setFeedbackList] = useState([]);
  const [loadingFeedback, setLoadingFeedback] = useState(false);
  const [selectedFeedback, setSelectedFeedback] = useState(null);
  const [responseText, setResponseText] = useState('');
  const [showResponseModal, setShowResponseModal] = useState(false);
  const [sendingResponse, setSendingResponse] = useState(false);
  const [feedbackFilter, setFeedbackFilter] = useState('all');

  // Community management state
  const [globalPosts, setGlobalPosts] = useState([]);
  const [loadingCommunity, setLoadingCommunity] = useState(false);
  const [newAnnouncementText, setNewAnnouncementText] = useState('');
  const [postImage, setPostImage] = useState(null);
  const [allUsers, setAllUsers] = useState([]);
  const [filteredUsers, setFilteredUsers] = useState([]);
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedUser, setSelectedUser] = useState(null);
  const [messages, setMessages] = useState([]);
  const [newMessage, setNewMessage] = useState('');
  const [fileAttachment, setFileAttachment] = useState(null);
  const [commentText, setCommentText] = useState({});
  const [showCommunitySection, setShowCommunitySection] = useState(false);
  const fileInputRef = useRef(null);

  // Instructor upload state
  const [showInstructorUploadSection, setShowInstructorUploadSection] = useState(false);
  const [countries, setCountries] = useState([]);
  const [selectedCountry, setSelectedCountry] = useState('');
  const [universities, setUniversities] = useState([]);
  const [selectedUniversity, setSelectedUniversity] = useState('');
  const [isCountriesLoading, setIsCountriesLoading] = useState(false);
  const [isUniversitiesLoading, setIsUniversitiesLoading] = useState(false);
  const [instructorUploadFile, setInstructorUploadFile] = useState(null);
  const [isInstructorUploading, setIsInstructorUploading] = useState(false);
  const [instructorUploadProgress, setInstructorUploadProgress] = useState(0);
  const [instructorUploadResult, setInstructorUploadResult] = useState(null);
  const [manualInstructors, setManualInstructors] = useState([{ name: '', email: '', position: '', department: '' }]);
  const [uploadOption, setUploadOption] = useState('file'); // 'file' or 'manual'

  // Add state for university search
  const [universitySearch, setUniversitySearch] = useState('');
  const [filteredUniversities, setFilteredUniversities] = useState([]);

  // Define all the functions from the original component here
  // ...

  // Fetch dashboard data function
  const fetchDashboardData = async () => {
    // Implementation from original file
  };

  // Other functions
  const handleManageCommunity = () => {
    setShowCommunitySection(true);
    // Rest of the implementation
  };

  const handleManageInstructors = () => {
    setShowInstructorUploadSection(true);
    // Rest of the implementation
  };

  const fetchFeedback = async (status = 'all') => {
    // Implementation from original file
  };

  const updateFeedbackStatus = async (id, status) => {
    // Implementation from original file
  };

  const openResponseModal = (feedback) => {
    // Implementation from original file
  };

  const sendResponse = async () => {
    // Implementation from original file
  };

  const formatDate = (dateString) => {
    // Implementation from original file
    return new Date(dateString).toLocaleDateString();
  };

  return (
    <div className="bg-gray-900 text-gray-100 min-h-screen">
      {/* Header/Navbar */}
      <header className="bg-gray-800 p-4 border-b border-gray-700">
        <div className="container mx-auto flex justify-between items-center">
          <h1 className="text-2xl font-bold text-cyan-400">Edu Hub Admin Dashboard</h1>
          <div className="flex items-center space-x-4">
            <span className="text-gray-300">Welcome, Admin!</span>
            <button onClick={() => navigate('/')} className="text-gray-400 hover:text-white">
              View Site
            </button>
            <Settings className="h-5 w-5 text-gray-400 cursor-pointer hover:text-cyan-400 transition duration-200" />
          </div>
        </div>
      </header>

      <div className="container mx-auto p-6">
        {/* Stats Cards - First Row */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-6">
          <div className="bg-gradient-to-br from-blue-600/20 to-blue-800/20 p-6 rounded-lg border border-blue-700/50 shadow-lg">
            <div className="flex items-center mb-3">
              <Users className="h-7 w-7 text-blue-400 mr-3" />
              <h3 className="text-lg font-semibold text-gray-200">Total Users</h3>
            </div>
            <p className="text-3xl font-bold text-white">{isLoading ? '...' : stats.users || 0}</p>
          </div>
          
          <div className="bg-gradient-to-br from-green-600/20 to-green-800/20 p-6 rounded-lg border border-green-700/50 shadow-lg">
            <div className="flex items-center mb-3">
              <BookOpen className="h-7 w-7 text-green-400 mr-3" />
              <h3 className="text-lg font-semibold text-gray-200">Total Courses</h3>
            </div>
            <p className="text-3xl font-bold text-white">{isLoading ? '...' : stats.courses || 0}</p>
          </div>

          <div className="bg-gradient-to-br from-amber-600/20 to-amber-800/20 p-6 rounded-lg border border-amber-700/50 shadow-lg">
            <div className="flex items-center mb-3">
              <Briefcase className="h-7 w-7 text-amber-400 mr-3" />
              <h3 className="text-lg font-semibold text-gray-200">Active Jobs</h3>
            </div>
            <p className="text-3xl font-bold text-white">{isLoading ? '...' : stats.jobs || 0}</p>
          </div>
          
          <div className="bg-gradient-to-br from-purple-600/20 to-purple-800/20 p-6 rounded-lg border border-purple-700/50 shadow-lg">
            <div className="flex items-center mb-3">
              <GraduationCap className="h-7 w-7 text-purple-400 mr-3" />
              <h3 className="text-lg font-semibold text-gray-200">Instructors</h3>
            </div>
            <p className="text-3xl font-bold text-white">{isLoading ? '...' : stats.instructors || 0}</p>
          </div>
        </div>
        
        {/* Stats Cards - Second Row */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
          <div className="bg-gradient-to-br from-indigo-600/20 to-indigo-800/20 p-6 rounded-lg border border-indigo-700/50 shadow-lg">
            <div className="flex items-center mb-3">
              <Bell className="h-7 w-7 text-indigo-400 mr-3" />
              <h3 className="text-lg font-semibold text-gray-200">Total Notices</h3>
            </div>
            <p className="text-3xl font-bold text-white">{isLoading ? '...' : stats.notices || 0}</p>
          </div>
          
          <div className="bg-gradient-to-br from-pink-600/20 to-pink-800/20 p-6 rounded-lg border border-pink-700/50 shadow-lg">
            <div className="flex items-center mb-3">
              <MessageSquare className="h-7 w-7 text-pink-400 mr-3" />
              <h3 className="text-lg font-semibold text-gray-200">Feedback Entries</h3>
            </div>
            <p className="text-3xl font-bold text-white">{isLoading ? '...' : stats.feedback || 0}</p>
          </div>
          
          <div className="bg-gradient-to-br from-cyan-600/20 to-cyan-800/20 p-6 rounded-lg border border-cyan-700/50 shadow-lg">
            <div className="flex items-center mb-3">
              <Globe className="h-7 w-7 text-cyan-400 mr-3" />
              <h3 className="text-lg font-semibold text-gray-200">Community Posts</h3>
            </div>
            <p className="text-3xl font-bold text-white">{isLoading ? '...' : stats.globalPosts || 0}</p>
          </div>
          
          <div className="bg-gradient-to-br from-orange-600/20 to-orange-800/20 p-6 rounded-lg border border-orange-700/50 shadow-lg">
            <div className="flex items-center mb-3">
              <Calendar className="h-7 w-7 text-orange-400 mr-3" />
              <h3 className="text-lg font-semibold text-gray-200">Events Hosted</h3>
            </div>
            <p className="text-3xl font-bold text-white">{isLoading ? '...' : stats.events || 0}</p>
          </div>
        </div>
        
        {/* Quick Actions */}
        <div className="bg-gray-800 rounded-lg p-6 border border-gray-700 shadow-lg mb-8">
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-xl font-bold text-white">Quick Actions</h2>
          </div>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
            <Link to="/post-job" className="flex items-center p-3 bg-gray-700/50 hover:bg-gray-700 rounded-lg border border-gray-600 transition-colors">
              <Briefcase className="h-5 w-5 text-amber-400 mr-3" />
              <span className="text-gray-200">Post New Job</span>
            </Link>
            
            <Link to="/post-notice" className="flex items-center p-3 bg-gray-700/50 hover:bg-gray-700 rounded-lg border border-gray-600 transition-colors">
              <Bell className="h-5 w-5 text-purple-400 mr-3" />
              <span className="text-gray-200">Post New Notice</span>
            </Link>
            
            <Link to="/add-course" className="flex items-center p-3 bg-gray-700/50 hover:bg-gray-700 rounded-lg border border-gray-600 transition-colors">
              <BookOpen className="h-5 w-5 text-green-400 mr-3" />
              <span className="text-gray-200">Add New Course</span>
            </Link>
          </div>
          
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <button 
              onClick={handleManageInstructors}
              className="flex items-center p-3 bg-gray-700/50 hover:bg-gray-700 rounded-lg border border-gray-600 transition-colors text-left"
            >
              <GraduationCap className="h-5 w-5 text-purple-400 mr-3" />
              <span className="text-gray-200">Add New Instructor</span>
            </button>
            
            <button 
              onClick={handleManageCommunity} 
              className="flex items-center p-3 bg-gray-700/50 hover:bg-gray-700 rounded-lg border border-gray-600 transition-colors"
            >
              <Globe className="h-5 w-5 text-cyan-400 mr-3" />
              <span className="text-gray-200">Manage Community</span>
            </button>
            
            <Link to="/add-event" className="flex items-center p-3 bg-gray-700/50 hover:bg-gray-700 rounded-lg border border-gray-600 transition-colors">
              <Calendar className="h-5 w-5 text-orange-400 mr-3" />
              <span className="text-gray-200">Add New Event</span>
            </Link>
          </div>
        </div>
        
        {/* Recent Instructors Section */}
        <div className="bg-gray-800 rounded-lg p-6 border border-gray-700 shadow-lg mb-8">
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-xl font-bold text-white">Recent Instructors</h2>
            <Link to="/manage-instructors" className="text-sm text-purple-400 hover:text-purple-300">
              View All
            </Link>
          </div>
          {isLoading ? (
            <div className="flex justify-center py-6">
              <div className="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-purple-500"></div>
            </div>
          ) : (
            recentInstructors.length === 0 ? (
              <p className="text-gray-400 py-4">No instructors added yet.</p>
            ) : (
              <div className="overflow-x-auto">
                <table className="min-w-full bg-gray-900 rounded-lg overflow-hidden">
                  <thead className="bg-gray-700">
                    <tr>
                      <th className="py-3 px-4 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Name</th>
                      <th className="py-3 px-4 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Position</th>
                      <th className="py-3 px-4 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Department</th>
                      <th className="py-3 px-4 text-right text-xs font-medium text-gray-300 uppercase tracking-wider">Actions</th>
                    </tr>
                  </thead>
                  <tbody className="divide-y divide-gray-800">
                    {recentInstructors.map((instructor) => (
                      <tr key={instructor._id} className="hover:bg-gray-800/50">
                        <td className="py-2 px-4 text-sm font-medium text-white">{instructor.name}</td>
                        <td className="py-2 px-4 text-sm text-gray-300">{instructor.position}</td>
                        <td className="py-2 px-4 text-sm text-gray-300">{instructor.department}</td>
                        <td className="py-2 px-4 text-right">
                          <button className="p-1 text-blue-400 hover:text-blue-300">
                            <Edit className="h-4 w-4" />
                          </button>
                          <button className="p-1 ml-2 text-red-400 hover:text-red-300">
                            <Trash2 className="h-4 w-4" />
                          </button>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            )
          )}
        </div>
        
        {/* Recently Posted Jobs Section */}
        <div className="bg-gray-800 rounded-lg p-6 border border-gray-700 shadow-lg mb-8">
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-xl font-bold text-white">Recently Posted Jobs</h2>
            <Link to="/manage-jobs" className="text-sm text-amber-400 hover:text-amber-300">
              View All
            </Link>
          </div>
          {isLoading ? (
            <div className="flex justify-center py-6">
              <div className="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-amber-500"></div>
            </div>
          ) : (
            recentJobs.length === 0 ? (
              <p className="text-gray-400 py-4">No jobs posted yet.</p>
            ) : (
              <div className="overflow-x-auto">
                <table className="min-w-full bg-gray-900 rounded-lg overflow-hidden">
                  <thead className="bg-gray-700">
                    <tr>
                      <th className="py-3 px-4 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Title</th>
                      <th className="py-3 px-4 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Company</th>
                      <th className="py-3 px-4 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Type</th>
                      <th className="py-3 px-4 text-right text-xs font-medium text-gray-300 uppercase tracking-wider">Actions</th>
                    </tr>
                  </thead>
                  <tbody className="divide-y divide-gray-800">
                    {recentJobs.map((job) => (
                      <tr key={job._id} className="hover:bg-gray-800/50">
                        <td className="py-2 px-4 text-sm font-medium text-white">{job.title}</td>
                        <td className="py-2 px-4 text-sm text-gray-300">{job.company}</td>
                        <td className="py-2 px-4 text-xs">
                          <span className="px-2 py-1 rounded-full bg-amber-500/10 text-amber-400 border border-amber-500/30">
                            {job.type || job.jobType}
                          </span>
                        </td>
                        <td className="py-2 px-4 text-right">
                          <button className="p-1 text-blue-400 hover:text-blue-300">
                            <Edit className="h-4 w-4" />
                          </button>
                          <button className="p-1 ml-2 text-red-400 hover:text-red-300">
                            <Trash2 className="h-4 w-4" />
                          </button>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            )
          )}
        </div>
        
        {/* Academic Courses Section */}
        <div className="bg-gray-800 rounded-lg p-6 border border-gray-700 shadow-lg mb-8">
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-xl font-bold text-white">Academic Courses</h2>
            <Link to="/manage-courses" className="text-sm text-green-400 hover:text-green-300">
              View All
            </Link>
          </div>
          {isLoading ? (
            <div className="flex justify-center py-6">
              <div className="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-green-500"></div>
            </div>
          ) : (
            recentCourses.length === 0 ? (
              <p className="text-gray-400 py-4">No courses added yet.</p>
            ) : (
              <div className="overflow-x-auto">
                <table className="min-w-full bg-gray-900 rounded-lg overflow-hidden">
                  <thead className="bg-gray-700">
                    <tr>
                      <th className="py-3 px-4 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Title</th>
                      <th className="py-3 px-4 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Instructor</th>
                      <th className="py-3 px-4 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Department</th>
                      <th className="py-3 px-4 text-right text-xs font-medium text-gray-300 uppercase tracking-wider">Actions</th>
                    </tr>
                  </thead>
                  <tbody className="divide-y divide-gray-800">
                    {recentCourses.map((course) => (
                      <tr key={course._id} className="hover:bg-gray-800/50">
                        <td className="py-2 px-4 text-sm font-medium text-white">{course.title}</td>
                        <td className="py-2 px-4 text-sm text-gray-300">{course.instructor}</td>
                        <td className="py-2 px-4 text-sm text-gray-300">{course.department}</td>
                        <td className="py-2 px-4 text-right">
                          <button className="p-1 text-blue-400 hover:text-blue-300">
                            <Edit className="h-4 w-4" />
                          </button>
                          <button className="p-1 ml-2 text-red-400 hover:text-red-300">
                            <Trash2 className="h-4 w-4" />
                          </button>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            )
          )}
        </div>
        
        {/* Recent Notices Section */}
        <div className="bg-gray-800 rounded-lg p-6 border border-gray-700 shadow-lg mb-8">
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-xl font-bold text-white">Recent Notices</h2>
            <Link to="/manage-notices" className="text-sm text-indigo-400 hover:text-indigo-300">
              View All
            </Link>
          </div>
          {isLoading ? (
            <div className="flex justify-center py-6">
              <div className="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-indigo-500"></div>
            </div>
          ) : (
            recentNotices.length === 0 ? (
              <p className="text-gray-400 py-4">No notices posted yet.</p>
            ) : (
              <div className="overflow-x-auto">
                <table className="min-w-full bg-gray-900 rounded-lg overflow-hidden">
                  <thead className="bg-gray-700">
                    <tr>
                      <th className="py-3 px-4 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Title</th>
                      <th className="py-3 px-4 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">University</th>
                      <th className="py-3 px-4 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Importance</th>
                      <th className="py-3 px-4 text-right text-xs font-medium text-gray-300 uppercase tracking-wider">Actions</th>
                    </tr>
                  </thead>
                  <tbody className="divide-y divide-gray-800">
                    {recentNotices.map((notice) => (
                      <tr key={notice._id} className="hover:bg-gray-800/50">
                        <td className="py-2 px-4 text-sm font-medium text-white">{notice.title}</td>
                        <td className="py-2 px-4 text-sm text-gray-300">{notice.university}</td>
                        <td className="py-2 px-4 text-xs">
                          <span className={`px-2 py-1 rounded-full 
                            ${notice.importance === 'urgent' 
                              ? 'bg-red-500/10 text-red-400 border border-red-500/30' 
                              : notice.importance === 'important' 
                                ? 'bg-amber-500/10 text-amber-400 border border-amber-500/30' 
                                : 'bg-blue-500/10 text-blue-400 border border-blue-500/30'}`
                          }>
                            {notice.importance}
                          </span>
                        </td>
                        <td className="py-2 px-4 text-right">
                          <button className="p-1 text-blue-400 hover:text-blue-300">
                            <Edit className="h-4 w-4" />
                          </button>
                          <button className="p-1 ml-2 text-red-400 hover:text-red-300">
                            <Trash2 className="h-4 w-4" />
                          </button>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            )
          )}
        </div>
        
        {/* User Feedback Section */}
        <div className="bg-gray-800 rounded-lg p-6 border border-gray-700 shadow-lg mb-8">
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-xl font-bold text-white">User Feedback & Suggestions</h2>
            <button 
              onClick={() => fetchFeedback('all')}
              className="text-sm text-pink-400 hover:text-pink-300"
            >
              View All
            </button>
          </div>
          
          <div className="flex space-x-2 mb-4">
            <button 
              onClick={() => {setFeedbackFilter('all'); fetchFeedback('all');}}
              className={`px-3 py-1 rounded text-sm ${feedbackFilter === 'all' ? 'bg-gray-700 text-white' : 'text-gray-400 hover:text-white'}`}
            >
              All
            </button>
            <button 
              onClick={() => {setFeedbackFilter('pending'); fetchFeedback('pending');}}
              className={`px-3 py-1 rounded text-sm ${feedbackFilter === 'pending' ? 'bg-gray-700 text-white' : 'text-gray-400 hover:text-white'}`}
            >
              Pending
            </button>
            <button 
              onClick={() => {setFeedbackFilter('in-progress'); fetchFeedback('in-progress');}}
              className={`px-3 py-1 rounded text-sm ${feedbackFilter === 'in-progress' ? 'bg-gray-700 text-white' : 'text-gray-400 hover:text-white'}`}
            >
              In Progress
            </button>
            <button 
              onClick={() => {setFeedbackFilter('resolved'); fetchFeedback('resolved');}}
              className={`px-3 py-1 rounded text-sm ${feedbackFilter === 'resolved' ? 'bg-gray-700 text-white' : 'text-gray-400 hover:text-white'}`}
            >
              Resolved
            </button>
          </div>
          
          {loadingFeedback ? (
            <div className="flex justify-center py-6">
              <div className="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-pink-500"></div>
            </div>
          ) : (
            feedbackList.length === 0 ? (
              <p className="text-gray-400 py-4">No feedback entries available.</p>
            ) : (
              <div className="space-y-4">
                {feedbackList.slice(0, 5).map((feedback) => (
                  <div key={feedback._id} className="bg-gray-900 p-4 rounded-lg border border-gray-700">
                    <div className="flex justify-between items-start mb-2">
                      <div>
                        <h3 className="text-white font-medium">{feedback.subject}</h3>
                        <p className="text-gray-400 text-sm">{feedback.user?.name || 'Anonymous'} • {formatDate(feedback.createdAt)}</p>
                      </div>
                      <span className={`px-2 py-1 text-xs rounded-full ${
                        feedback.status === 'pending' ? 'bg-amber-500/10 text-amber-400 border border-amber-500/30' :
                        feedback.status === 'in-progress' ? 'bg-blue-500/10 text-blue-400 border border-blue-500/30' :
                        'bg-green-500/10 text-green-400 border border-green-500/30'
                      }`}>
                        {feedback.status}
                      </span>
                    </div>
                    <p className="text-gray-300 my-2">{feedback.message}</p>
                    <div className="flex justify-between mt-3">
                      <div className="flex space-x-2">
                        <button 
                          onClick={() => updateFeedbackStatus(feedback._id, 'in-progress')} 
                          className="text-xs px-2 py-1 bg-blue-500/10 text-blue-400 hover:bg-blue-500/20 rounded"
                        >
                          Mark In Progress
                        </button>
                        <button 
                          onClick={() => updateFeedbackStatus(feedback._id, 'resolved')} 
                          className="text-xs px-2 py-1 bg-green-500/10 text-green-400 hover:bg-green-500/20 rounded"
                        >
                          Mark Resolved
                        </button>
                      </div>
                      <button 
                        onClick={() => openResponseModal(feedback)}
                        className="text-xs px-2 py-1 bg-pink-500/10 text-pink-400 hover:bg-pink-500/20 rounded"
                      >
                        Respond
                      </button>
                    </div>
                  </div>
                ))}
                
                {feedbackList.length > 5 && (
                  <div className="text-center pt-2">
                    <button 
                      onClick={() => fetchFeedback(feedbackFilter)}
                      className="text-pink-400 hover:text-pink-300 text-sm"
                    >
                      View All Feedback
                    </button>
                  </div>
                )}
              </div>
            )
          )}
        </div>
        
        {/* Events Section */}
        <div className="bg-gray-800 rounded-lg p-6 border border-gray-700 shadow-lg mb-8">
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-xl font-bold text-white">Upcoming Events</h2>
            <Link to="/manage-events" className="text-sm text-orange-400 hover:text-orange-300">
              View All
            </Link>
          </div>
          
          <div className="flex justify-center py-6">
            <div className="text-center">
              <Calendar className="h-14 w-14 text-orange-400 mx-auto mb-3" />
              <h3 className="text-xl font-semibold text-white">Event Management</h3>
              <p className="text-gray-400 max-w-md mx-auto mt-2 mb-4">Create and manage university events, workshops, seminars, and other activities</p>
              <Link 
                to="/add-event" 
                className="inline-flex items-center px-4 py-2 bg-orange-600 text-white rounded-lg hover:bg-orange-700 transition-colors"
              >
                <PlusCircle className="h-4 w-4 mr-2" />
                Add New Event
              </Link>
            </div>
          </div>
        </div>

        {/* Additional Custom Sections as needed */}
        
        {/* Instructor Upload Section */}
        {showInstructorUploadSection && (
          <div className="bg-gray-800 rounded-lg p-6 border border-gray-700 shadow-xl mb-8">
            <div className="flex justify-between items-center mb-4">
              <h2 className="text-xl font-bold text-purple-400">Upload Instructors</h2>
              <button 
                onClick={() => setShowInstructorUploadSection(false)}
                className="text-gray-400 hover:text-white"
              >
                <X className="h-5 w-5" />
              </button>
            </div>
            <p className="text-gray-300 mb-4">
              Upload instructor information via CSV/Excel file or manual entry.
            </p>
            
            {/* Instructor upload implementation details */}
          </div>
        )}
        
        {/* Community Management Section */}
        {showCommunitySection && (
          <div id="community-section" className="bg-gray-800 rounded-lg p-6 border border-gray-700 shadow-xl mb-8">
            <div className="flex justify-between items-center mb-4">
              <h2 className="text-xl font-bold text-cyan-400">Community Management</h2>
              <button 
                onClick={() => setShowCommunitySection(false)}
                className="text-gray-400 hover:text-white"
              >
                <X className="h-5 w-5" />
              </button>
            </div>
            <p className="text-gray-300 mb-4">
              Manage global announcements and communicate with users.
            </p>
            
            {/* Community management implementation details */}
          </div>
        )}
        
        {/* Response Modal */}
        {showResponseModal && selectedFeedback && (
          <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
            <div className="bg-gray-800 rounded-xl shadow-xl w-full max-w-md overflow-hidden">
              <div className="bg-gray-700 p-4">
                <h3 className="text-lg font-medium text-white">Reply to Feedback</h3>
              </div>
              
              <div className="p-6">
                <div className="mb-4">
                  <p className="text-sm text-gray-400">From: {selectedFeedback.user?.name || 'Anonymous'}</p>
                  <p className="text-sm text-gray-400 mt-1">Subject: {selectedFeedback.subject}</p>
                  <p className="text-sm text-gray-400 mt-1">Category: {selectedFeedback.category}</p>
                </div>
                
                <div className="mb-6 bg-gray-700 p-4 rounded-lg">
                  <p className="text-sm text-gray-300">{selectedFeedback.message}</p>
                </div>
                
                <div className="mb-4">
                  <label htmlFor="response" className="block text-sm font-medium text-gray-300 mb-2">
                    Your Response
                  </label>
                  <textarea
                    id="response"
                    rows="4"
                    className="w-full px-3 py-2 text-gray-100 bg-gray-700 rounded-lg focus:outline-none focus:ring-2 focus:ring-cyan-500"
                    placeholder="Type your response here..."
                    value={responseText}
                    onChange={(e) => setResponseText(e.target.value)}
                  ></textarea>
                </div>
              </div>
              
              <div className="px-6 py-4 bg-gray-700 flex justify-end space-x-3">
                <button
                  onClick={() => setShowResponseModal(false)}
                  className="px-4 py-2 text-sm font-medium text-gray-300 bg-gray-600 rounded-lg hover:bg-gray-500 focus:outline-none"
                >
                  Cancel
                </button>
                <button
                  onClick={sendResponse}
                  disabled={!responseText.trim() || sendingResponse}
                  className={`px-4 py-2 text-sm font-medium text-white rounded-lg focus:outline-none flex items-center
                    ${!responseText.trim() || sendingResponse ? 'bg-cyan-600/50 cursor-not-allowed' : 'bg-cyan-600 hover:bg-cyan-700'}`}
                >
                  {sendingResponse ? (
                    <>
                      <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
                      Sending...
                    </>
                  ) : (
                    <>
                      <Mail className="h-4 w-4 mr-2" />
                      Send Response
                    </>
                  )}
                </button>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default AdminDashboard; 